"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.command = void 0;
const command_1 = require("../command");
const projectUtils_1 = require("../projectUtils");
const error_1 = require("../error");
const prompt_1 = require("../prompt");
const constants_1 = require("../init/features/apphosting/constants");
const utils = require("../utils");
const apphosting = require("../gcp/apphosting");
const apphosting_backends_list_1 = require("./apphosting-backends-list");
exports.command = new command_1.Command("apphosting:backends:delete <backend>")
    .description("delete a backend from a Firebase project")
    .option("-l, --location <location>", "App Backend location", "")
    .withForce()
    .before(apphosting.ensureApiEnabled)
    .action(async (backendId, options) => {
    const projectId = (0, projectUtils_1.needProjectId)(options);
    let location = options.location;
    if (!backendId) {
        throw new error_1.FirebaseError("Backend id can't be empty.");
    }
    if (!location) {
        const allowedLocations = (await apphosting.listLocations(projectId)).map((loc) => loc.locationId);
        location = await (0, prompt_1.promptOnce)({
            name: "region",
            type: "list",
            default: constants_1.DEFAULT_REGION,
            message: "Please select the region of the backend you'd like to delete:",
            choices: allowedLocations,
        });
    }
    let backend;
    try {
        backend = await apphosting.getBackend(projectId, location, backendId);
    }
    catch (err) {
        throw new error_1.FirebaseError(`No backends found with given parameters. Command aborted.`, {
            original: err,
        });
    }
    utils.logWarning("You are about to permanently delete the backend:");
    const backends = [backend];
    (0, apphosting_backends_list_1.printBackendsTable)(backends);
    const confirmDeletion = await (0, prompt_1.promptOnce)({
        type: "confirm",
        name: "force",
        default: false,
        message: "Are you sure?",
    }, options);
    if (!confirmDeletion) {
        throw new error_1.FirebaseError("Deletion Aborted");
    }
    try {
        await apphosting.deleteBackend(projectId, location, backendId);
        utils.logSuccess(`Successfully deleted the backend: ${backendId}`);
    }
    catch (err) {
        throw new error_1.FirebaseError(`Failed to delete backend: ${backendId}. Please check the parameters you have provided.`, { original: err });
    }
    return backend;
});
