{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport{initializeApp}from\"firebase/app\";import{getFirestore}from\"firebase/firestore\";// Import Firestore\nimport{getAuth,signInWithPopup,GoogleAuthProvider}from\"firebase/auth\";// Your web app's Firebase configuration\nconst firebaseConfig={apiKey:\"AIzaSyA9p84YFSaRrWYI5c2Dm4CwmgtJuWTys9g\",authDomain:\"aiden-shiv.firebaseapp.com\",projectId:\"aiden-shiv\",storageBucket:\"aiden-shiv.appspot.com\",messagingSenderId:\"701389143848\",appId:\"1:701389143848:web:3cc71c72b92baac7d55a1d\",measurementId:\"G-RNTHBZZKJ2\"};// Initialize Firebase\nconst app=initializeApp(firebaseConfig);// Initialize Firebase Authentication and get a reference to the service\nconst auth=getAuth(app);// Initialize Firestore\nconst db=getFirestore(app);// Define signInWithGoogle\nconst provider=new GoogleAuthProvider();const signInWithGoogle=()=>signInWithPopup(auth,provider).then(result=>{// This gives you a Google Access Token. You can use it to access the Google API.\nconst credential=GoogleAuthProvider.credentialFromResult(result);const token=credential.accessToken;// The signed-in user info.\nconst user=result.user;// Optional: Update UI or state with user information\n}).catch(error=>{// Handle Errors here.\nconst errorCode=error.code;const errorMessage=error.message;// The email of the user's account used.\nconst email=error.email;// The AuthCredential type that was used.\nconst credential=GoogleAuthProvider.credentialFromError(error);// Optional: Update UI or log errors\n});// Export auth, db, and signInWithGoogle for use in your app\nexport{auth,db,signInWithGoogle};","map":{"version":3,"names":["initializeApp","getFirestore","getAuth","signInWithPopup","GoogleAuthProvider","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","auth","db","provider","signInWithGoogle","then","result","credential","credentialFromResult","token","accessToken","user","catch","error","errorCode","code","errorMessage","message","email","credentialFromError"],"sources":["/home/posiden/Documents/GitHub/A.I.D.E.N/aiden_frontend/src/firebaseConfig.js"],"sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore } from \"firebase/firestore\"; // Import Firestore\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyA9p84YFSaRrWYI5c2Dm4CwmgtJuWTys9g\",\n  authDomain: \"aiden-shiv.firebaseapp.com\",\n  projectId: \"aiden-shiv\",\n  storageBucket: \"aiden-shiv.appspot.com\",\n  messagingSenderId: \"701389143848\",\n  appId: \"1:701389143848:web:3cc71c72b92baac7d55a1d\",\n  measurementId: \"G-RNTHBZZKJ2\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Initialize Firebase Authentication and get a reference to the service\nconst auth = getAuth(app);\n\n// Initialize Firestore\nconst db = getFirestore(app);\n\n// Define signInWithGoogle\nconst provider = new GoogleAuthProvider();\nconst signInWithGoogle = () => signInWithPopup(auth, provider)\n  .then((result) => {\n    // This gives you a Google Access Token. You can use it to access the Google API.\n    const credential = GoogleAuthProvider.credentialFromResult(result);\n    const token = credential.accessToken;\n    // The signed-in user info.\n    const user = result.user;\n    // Optional: Update UI or state with user information\n  }).catch((error) => {\n    // Handle Errors here.\n    const errorCode = error.code;\n    const errorMessage = error.message;\n    // The email of the user's account used.\n    const email = error.email;\n    // The AuthCredential type that was used.\n    const credential = GoogleAuthProvider.credentialFromError(error);\n    // Optional: Update UI or log errors\n  });\n\n// Export auth, db, and signInWithGoogle for use in your app\nexport { auth, db, signInWithGoogle };\n"],"mappings":"AAAA;AACA,OAASA,aAAa,KAAQ,cAAc,CAC5C,OAASC,YAAY,KAAQ,oBAAoB,CAAE;AACnD,OAASC,OAAO,CAAEC,eAAe,CAAEC,kBAAkB,KAAQ,eAAe,CAE5E;AACA,KAAM,CAAAC,cAAc,CAAG,CACrBC,MAAM,CAAE,yCAAyC,CACjDC,UAAU,CAAE,4BAA4B,CACxCC,SAAS,CAAE,YAAY,CACvBC,aAAa,CAAE,wBAAwB,CACvCC,iBAAiB,CAAE,cAAc,CACjCC,KAAK,CAAE,2CAA2C,CAClDC,aAAa,CAAE,cACjB,CAAC,CAED;AACA,KAAM,CAAAC,GAAG,CAAGb,aAAa,CAACK,cAAc,CAAC,CAEzC;AACA,KAAM,CAAAS,IAAI,CAAGZ,OAAO,CAACW,GAAG,CAAC,CAEzB;AACA,KAAM,CAAAE,EAAE,CAAGd,YAAY,CAACY,GAAG,CAAC,CAE5B;AACA,KAAM,CAAAG,QAAQ,CAAG,GAAI,CAAAZ,kBAAkB,CAAC,CAAC,CACzC,KAAM,CAAAa,gBAAgB,CAAGA,CAAA,GAAMd,eAAe,CAACW,IAAI,CAAEE,QAAQ,CAAC,CAC3DE,IAAI,CAAEC,MAAM,EAAK,CAChB;AACA,KAAM,CAAAC,UAAU,CAAGhB,kBAAkB,CAACiB,oBAAoB,CAACF,MAAM,CAAC,CAClE,KAAM,CAAAG,KAAK,CAAGF,UAAU,CAACG,WAAW,CACpC;AACA,KAAM,CAAAC,IAAI,CAAGL,MAAM,CAACK,IAAI,CACxB;AACF,CAAC,CAAC,CAACC,KAAK,CAAEC,KAAK,EAAK,CAClB;AACA,KAAM,CAAAC,SAAS,CAAGD,KAAK,CAACE,IAAI,CAC5B,KAAM,CAAAC,YAAY,CAAGH,KAAK,CAACI,OAAO,CAClC;AACA,KAAM,CAAAC,KAAK,CAAGL,KAAK,CAACK,KAAK,CACzB;AACA,KAAM,CAAAX,UAAU,CAAGhB,kBAAkB,CAAC4B,mBAAmB,CAACN,KAAK,CAAC,CAChE;AACF,CAAC,CAAC,CAEJ;AACA,OAASZ,IAAI,CAAEC,EAAE,CAAEE,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}